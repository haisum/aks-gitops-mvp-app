name: 'Blue rollout'
on: 
  status:
  check_run:

jobs:
  check-status:
    name: 'Check statuses and start deployment'
    runs-on: ubuntu-latest
    if: github.event_name == 'status' || github.event_name == 'check_run'

    steps:
      - name: 'Check statuses'
        id: check
        uses: actions/github-script@0.8.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const status = await github.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.sha || context.sha,
            });
            console.log("::set-output name=status::%s",status.data.state)
      
      - name: 'Create deployment'
        if: steps.check.outputs.status == 'success'
        id: deployment
        uses: actions/github-script@0.8.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const deployment = await github.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.sha || context.sha,
              auto_merge: false,
              environment: 'production',
              payload: '{ "app": "helloworld", "type": "blue" }'
            });
            console.log("::set-output name=deployment_id::%s", deployment.data.id)

      - name: 'Update deployment status'
        if: steps.check.outputs.status == 'success'
        uses: actions/github-script@0.8.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const deployment = await github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: 'pending',
            });

      - name: 'Deploy to blue environment'
        if: steps.check.outputs.status == 'success'
        shell: bash
        run: |
          echo 'Deploying blue'
        
      - name: 'Update deployment status'
        if: steps.check.outputs.status == 'success'
        uses: actions/github-script@0.8.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{steps.deployment.outputs.deployment_id}},
              state: 'in_progress',
              description: 'Blue environment deployed',
              mediaType: { previews: ['flash-preview'] }              
            });
